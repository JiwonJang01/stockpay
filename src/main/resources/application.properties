spring.application.name=stockpay

# Secret
spring.profiles.active=secret

# JPA
spring.jpa.database=postgresql
spring.jpa.hibernate.ddl-auto=create
#spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# PostgreSQL
spring.sql.init.mode=always
spring.sql.init.continue-on-error=true
spring.jpa.defer-datasource-initialization=true
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.url=jdbc:postgresql://localhost:5433/stockpay
spring.datasource.username=stockpay
spring.datasource.driver-class-name=org.postgresql.Driver

# Redis
spring.data.redis.host=localhost
spring.data.redis.port=6379
spring.data.redis.timeout=5000ms
spring.data.redis.lettuce.pool.max-active=20
spring.data.redis.lettuce.pool.max-idle=10
spring.data.redis.lettuce.pool.min-idle=5
spring.data.redis.lettuce.pool.max-wait=3000ms

# Kafka (Docker Compose)
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=stockpay-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.enable-auto-commit=false
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.max-poll-records=10
spring.kafka.consumer.session-timeout-ms=30000
spring.kafka.consumer.heartbeat-interval-ms=10000

# Kafka Producer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.acks=all
spring.kafka.producer.retries=3
spring.kafka.producer.batch-size=16384
spring.kafka.producer.linger-ms=10
spring.kafka.producer.buffer-memory=33554432
spring.kafka.producer.enable-idempotence=true

# WebSocket
websocket.connection.timeout=30000
websocket.reconnect.interval=5000
websocket.max-retry-attempts=10

# Cache TTL
cache.realtime.stock-price-ttl=60s
cache.realtime.orderbook-ttl=30s

# Spring Boot Actuator (Health Check)
management.endpoints.web.exposure.include=health,info,metrics,kafka
management.endpoint.health.show-details=always
management.health.kafka.enabled=true
management.health.redis.enabled=true

# logging
logging.level.com.project.stockpay.common.websocket=DEBUG
logging.level.com.project.stockpay.stock.service=DEBUG
logging.level.org.springframework.web.socket=INFO
logging.level.org.springframework.kafka=INFO
logging.level.org.apache.kafka=WARN

# KIS API URL
kis.api-url=https://openapi.koreainvestment.com:9443
kis.mock-api-url=https://openapivts.koreainvestment.com:29443
kis.mode=mock

# server port
server.port=8085

# ??? ?? ??
logging.level.com.project.stockpay.stock.service.TradingService=DEBUG
logging.level.org.springframework.transaction=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE